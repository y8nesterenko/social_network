{"version":3,"file":"static/js/619.6edcf599.chunk.js","mappings":"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","sources":["webpack://my-react/./src/components/Friends/Friends.module.css?cf9f","webpack://my-react/./src/components/common/Pagination.module.css?cbdc","components/common/Pagination.jsx","components/Friends/Friends.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/userSelectors.js","components/Friends/FriendsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Friends_wrapper__Bkkve\",\"title\":\"Friends_title__ieG2I\",\"body\":\"Friends_body__zQ325\",\"avatar\":\"Friends_avatar__dpSbi\",\"info\":\"Friends_info__38-42\",\"info__column\":\"Friends_info__column__WrcNw\",\"info__column_right\":\"Friends_info__column_right__xVFRf\"};","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__-o8U5\",\"selectedPage\":\"Pagination_selectedPage__qd9AO\"};","import style from \"./Pagination.module.css\";\r\nimport React from \"react\";\r\n\r\nconst Pagination = (props) => {\r\n\r\n    //узнаём количество страниц для общего числа пользователей и округляем в большую сторону\r\n    let pagesCount = Math.ceil(props.totalFriendsCount / props.pageSize);\r\n    //создаём массив с количеством страниц пользователей\r\n    let pages = [];\r\n    //заполняем массив количеством значений\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    ;\r\n\r\n//вывод части старниц в пагинации\r\n    let curPF = ((props.currentPage - 3) < 0) ? 0 : props.currentPage - 3;\r\n    let curPL = props.currentPage + 3;\r\n    let slicedPages = pages.slice(curPF, curPL);\r\n\r\n    return (\r\n        <div>\r\n            {/*выводим кнопки пагинации для отображения пользователей*/}\r\n            <div className={style.pagination}>\r\n                <button onClick={(e) => {\r\n                    props.onPageChanged(pages[0]);\r\n                }}>start\r\n                </button>\r\n\r\n                <button disabled={props.currentPage < 6}\r\n                    onClick={(e) => {\r\n                    props.onPageChanged(props.currentPage - 5);\r\n                }}>prev\r\n                </button>\r\n\r\n                {/*пробегаемся по количеству страниц в массиве и отображаем каждую в отдельной кнопке*/}\r\n                {slicedPages.map(page => {\r\n                    //стрелочная функция всегда должна что-то возвращать (return'ить)\r\n                    return <button key={page.id}\r\n                        //если номер текущей страницы равен номеру страницы, тогда выделяем её в css\r\n                                   className={props.currentPage === page && style.selectedPage}\r\n                        //при клиеке меняем текущую страницу (currentPage) в state'е\r\n                                   onClick={(e) => {\r\n                                       props.onPageChanged(page);\r\n                                   }}>{page}</button>\r\n                })}\r\n\r\n                <button disabled={props.currentPage > pages.length - 5}\r\n                    onClick={(e) => {\r\n                        props.onPageChanged(props.currentPage + 5);\r\n                    }}>next\r\n                    </button>\r\n\r\n                <button onClick={(e) => {\r\n                    props.onPageChanged(pages.length);\r\n                }}>end\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport style from './Friends.module.css';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Pagination from \"../common/Pagination\";\r\n\r\nconst Friends = (props) => {\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <span className={style.title}>USERS</span>\r\n            <Pagination {...props}/>\r\n\r\n            {props.friends.map(friends => <div key={friends.id}>\r\n                <div className={style.header}></div>\r\n                <div className={style.body}>\r\n                    <div className={style.avatar}>\r\n\r\n                        {/*Оборачиваем картинку пользователя ссылкой для перехода на его профиль*/}\r\n                        <NavLink to={'/profile/' + friends.id}>\r\n                            <img src={friends.photos.small != null ? friends.photos.small : userPhoto}/>\r\n                        </NavLink>\r\n                        {friends.followed\r\n                            //кнопка дисейблится если в массиве хоть одна айдишка равна айдишке пользователя\r\n                            ? <button disabled={props.followingInProgress.some(id => id === friends.id)}\r\n                                      onClick={() => {\r\n                                          props.unfollow(friends.id)\r\n                                      }}>Unfollow</button>\r\n                            //если в массиве хоть одна айдишка равна айдишке пользователя, тогда дизейблим (вернётся true. В противном случае вернётся false)\r\n                            : <button disabled={props.followingInProgress.some(id => id === friends.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(friends.id)\r\n                                      }}>Follow</button>\r\n                        }\r\n                    </div>\r\n                    <div className={style.info}>\r\n                        <div className={style.info__column}>\r\n                            <div className={style.info__row}>{friends.name}</div>\r\n                            <br/>\r\n                            <div className={style.info__row}>{friends.status}</div>\r\n                        </div>\r\n                        <div className={style.info__column + ' ' + style.info__column_right}>\r\n                            <div className={style.info__row}>{'friends.location.country'},</div>\r\n                            <div className={style.info__row}>{'friends.location.city'}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )}\r\n        </div>)\r\n}\r\n\r\nexport default Friends;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import {createSelector} from \"reselect\";\r\n\r\nexport const getUsersSelector = (state) => {\r\n    return state.friendsPage.friends\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n    }\r\n);\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.friendsPage.pageSize\r\n};\r\n\r\nexport const getTotalFriendsCount = (state) => {\r\n    return state.friendsPage.totalFriendsCount\r\n};\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.friendsPage.currentPage\r\n};\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.friendsPage.isFetching\r\n};\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.friendsPage.followingInProgress\r\n};","import React from \"react\";\r\nimport Friends from \"./Friends\";\r\nimport {connect} from \"react-redux\";\r\nimport {follow, unfollow, requestUsers, setCurrentPage} from \"../../redux/friends-reducer\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getUsers, getCurrentPage, getFollowingInProgress,\r\n    getIsFetching, getPageSize, getTotalFriendsCount,\r\n} from \"../../redux/userSelectors\";\r\n\r\nclass FriendsContainer extends React.Component {\r\n\r\n    //constructor можно не писать, если он просто передаёт пропсы родителю (super'у). Он это делает по умолчанию\r\n    //constructor(props) {\r\n    //super(props);}\r\n    componentDidMount() {\r\n       this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    //метод для запроса на сервер при клике на текущию страницу массива пользователей\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n    };\r\n\r\n\r\n    //props'ы сюда не приходят\r\n    //render перерисовки не делает. Реакт говорит компоненте \"дай мне JSX, а я дальше уже подумаю, что с ним делать\"\r\n    render() {\r\n\r\n        return (\r\n            //оборачиваем компонент Friends пустым элементом (фрагментом)\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Friends\r\n                    totalFriendsCount={this.props.totalFriendsCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    friends={this.props.friends}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\n/*\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        //прокидываем через пропсы в компоненту данные из редюсера\r\n        // при изменении state'a connect заново вызывает MSTP, чтобы достать новые, свежие пропсы\r\n        friends: state.friendsPage.friends,\r\n        pageSize: state.friendsPage.pageSize,\r\n        totalFriendsCount: state.friendsPage.totalFriendsCount,\r\n        currentPage: state.friendsPage.currentPage,\r\n        isFetching: state.friendsPage.isFetching,\r\n        followingInProgress: state.friendsPage.followingInProgress,\r\n    }\r\n};\r\n */\r\n\r\nlet mapStateToProps = (state) => ({\r\n    friends: getUsers(state),\r\n    pageSize: getPageSize(state),\r\n    totalFriendsCount: getTotalFriendsCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n});\r\n\r\n/*\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPage,\r\n    getUsers,\r\n})(FriendsContainer);\r\n*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        requestUsers,\r\n    }),\r\n    //withAuthRedirect,\r\n)(FriendsContainer);"],"names":["props","pagesCount","Math","ceil","totalFriendsCount","pageSize","pages","i","push","curPF","currentPage","curPL","slicedPages","slice","className","style","onClick","e","onPageChanged","disabled","map","page","id","length","friends","to","src","photos","small","userPhoto","followed","followingInProgress","some","unfollow","follow","name","status","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","Object","assign","lastResult","recomputations","resetRecomputations","getUsers","state","friendsPage","users","filter","u","getPageSize","getTotalFriendsCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","FriendsContainer","pageNumber","setCurrentPage","requestUsers","this","Preloader","React","compose","connect"],"sourceRoot":""}